1. Створення проекту ----------------------------------------------------------------------------------------------------------- 

   - Встановлено: node, git
   - Відкриваємо папку проекта в терміналі

   - Сворюємо файл: package.json де будуть налаштування, та інформація о встановлених пакетах:
   npn init 

   - (node package manager) - система керування пакетами

   - після чого треба підтвердити ім'я збірки, версію, все інше крім ім'я пропустили натискаючи enter, 
   в кінці перевірка даних - набір 'y' 

   - Файл package.json створився в папці, відкрив його ми бачимо введені дані: дані можна змінювати. 
   Наприклад ми змінюємо назву index.js на gulpfile.js

   - Під назвою файла створюємо новий параметр: "type": "module", це тип роботи - дозволяє працювати з модулями ES6,
   тобто з пакетами останніх версій

2. Встановлення Gulp глобально в систему та локально в проект -------------------------------------------------------------------

   - В терміналі: встановлюємо галп глобально в систему: npm i gulp-cli -g (це робиться один раз),
   додав sudo в початок - не було доступу

   - Встановлюємо галп в проект локально: npm i gulp -D (-D - зберегаємо в об'єкті devDependencies), 
   що потім бачимо в package.json - версію встановленого галпа

   - Створили вручну: gulpfile.js, та папку з вихідними даними src, та папки з допоміжними файлами gulp/config, gulp/tasks
   config - для файлів налаштувань, створюємо там path.js, plugins.js, ftp.js

   path.js - налаштовуємо шляхі до файлів та папок, щоб вихідні файли копіювалися в папку результату
   - створили там експорт об'єкту path з усіма шляхами
   
   gulpfile.js - прописуємо потім його, сценарій що робити з файлами

3. Tasks ------------------------------------------------------------------------------------------------------------------------

   - Далі пишемо конкретні завдання сценарію в папку tasks, створюємо copy.js
   Підключили до файла gulpfile.js нашу задачу copy

   - Створюємо папку files в папке src, і в неї тестові тхт файли, які успішно скопіювались в dist/files
   після набору команди: gulp

   - Кожне додавання файлу в src, копіює ці файли в dist/files, після команди gulp, але ми хочемо автомитозувати...

4. Watcher ----------------------------------------------------------------------------------------------------------------------
   Створюємо стеження за файлами, в path прописуємо властивість watch - шлях за якими файлами стежити,
   в даному випадку шлях дорівнює шлях src

   15. Створили функцію watcher для стеження за файлами, і після команди gulp процес watcher не завершується в терміналі.
   Щоб завершити/вийти натиснути ctrl+c.

   Тепер копіювання відбувається автоматично, але при видаленні файлів з src, вони залишаються в dist/files - для цього створюємо
   нову задачу - файл reset.js для очищення результату кожного разу

 - Для цієї задачі встановлюємо плагін del командою: npm i -D del
   Підключаємо задачу в галпфайл, та вписуємо спостерігача в сценарій в початок подій

5. HTML -------------------------------------------------------------------------------------------------------------------------
   створюємо індекс.хтмл в папке scr, та прописуємо шлях до хтмл файлів в path.js
   а також прописуємо властивість хтмл в папку з результатом білд (в path.js)
   а також прописуємо в спостерігач (в path.js) - указуємо **/*.html щоб збирати з різних html файлів,
   створюємо папку html в папке src

  - Створюємо нову задачу - файл html.js в папке tasks, переносимо туди код на зразок copy.js 
   (копіюєм та редагуємо - змінюємо копі на хтмл)
  - додаємо це в сценарій а також в функцію спостерігача, щоб стежити за хтмл файлами

   - Встановлюємо плагін для збирання хтмл: npm i -D gulp-file-include (додався також опис у package.json)
   - імпортуємо його у html.js і вписуємо його у функцію

6. IMG --------------------------------------------------------------------------------------------------------------------------

   - Створюємо папку img в src, закидуєм туди імеджі, підлкючаєм одну в головний хтмл
   - Треба налаштувати шляхи до картинок, щоб підключати в вихідних файлах:
      - В росширеннях VSCode встановлюємо Path Autocomplete
      - Натискаємо F1, в пошуку знаходимо Open Settings JSON
      - Дописуємо там налаштування path-autocomplete.pathMappings
      - Прописали там "аліаси - псевдо нейми" - пишемо @img, а редактор розуміє кореневу папку: "${Folder}/src/img"
      - Після чого пишемо тег img та шлях src @img/ - після чого редактор вже підставляє що нам треба, пропонує папку src/img
      - В файлі хедера, який трохи глибше вложений, картинка додалась так само, тобто знаходить по підготовленому шляху
      - Але зібраний файл не зрозуміє цей шлях, тому продовжуємо...

   - Встановлюємо ще один плагін - npm i -D gulp-replace, відкриваємо plugins.js та імпортуємо його
   - Та прописуємо об'єкт в plugins.js, та імпортуємо його в головний gulpfile.js, та глобальний об'єкт app

   - Дописуємо наш плагін в файл html.js, щоб він замінив @img на просто img
   - В зібраному хтмл все добре змінилося

7. Підключаємо формат webp автоматично ------------------------------------------------------------------------------------------

   - Встановлюємо плагін npm i -D gulp-webp-html-nosvg
   - Підключаємо плагін в файл html.js, та дописуємо його в функцію html

   - Перевіряємо роботу плагіна - запуск gulp, усі наші теги img обернулися контейнерами з параметрами
   <picture><source srcset="img/image.webp" type="image/webp"> - тобто підключилась копія картинки, якої поки що нема

   - Але картинки та папка img не копіюються, мабуть буде налаштовано копіювання тільки webp якщо вони є, хоча має бути усе

8. Плагін npm i -D gulp-version-number - для уникнення проблем кеширования -------------------------------------------------------

   - зміни хешуються в браузері та не видимі нам
   - цей плагін буде додавати до файлів ключ, щоб зміни не хешировались у браузері
   - імпортували його в html.js, та прописали в хтмл таску в ланцюг плагінів.

   - підключаємо скріпт app.min.js в головний хтмл
   - також підключаємо в хед style.min.css
   - цих двох файлів ще не існує, вони створяться далі

   - запустили gulp
   - до шляхів цих файлів додалися наші ключі з датою та часом: 
   css/style.min.css?_v=20220606182746 та js/app.min.js?_v=20220606182746
   - це допоможе одразу бачити усі зміни

   - деякі ці плагіни будуть запускатися тільки в режиму продакшн, без режиму розробки

9. Додаємо ще плагіни в файл plugins.js ------------------------------------------------------------------------------------------

   - npm i -D gulp-plumber - обробка помилок
   - npm i -D gulp-notify - підказки
   - можна ставити одразу два: npm i -D gulp-plumber gulp-notify

   - імпортуємо їх в об'єкт plugins
   - та прописуємо знов в html.js майже в початок ланцюгу - виведення повідомлення якщо помилка
   - перевірили - при помилці імені підключаємого хтмл файлу, видає по типу алерт повідомлення з помилкою

   - додаємо ще один загальний плагін npm i -D gulp-newer - перевірка оновлення файлів. Оновлює тільки те, що оновилось...

10. Виведення хтмл в браузер -----------------------------------------------------------------------------------------------------

   - npm i -D browser-sync
   - додаємо його в об'єкт plugins

   - тепер треба виводити усі зміни на браузер:
      - створюємо таску server.js
      - підключаємо його в головний галп.жс
      - прописуємо в сценарій, паралельно з спостерігачем
      - та прописуємо рядок в html.js - стрім

11. Scss To Css ------------------------------------------------------------------------------------------------------------------

   - Прописуємо шляхі для scss в path.js
   - Створюємо таску scss.js
   - Встановлюємо два плагіна npm i -D sass gulp-sass, імпортуємо їх у таску
   - Також копіюємо туди pipe() з обробником помилок plumber з файла html.js
   - Також копіюємо туди pipe() обробник @img

   - В папці src створюємо папку scss, та в ній файл style.scss

   - Встановлюємо плагін npm i -D gulp-rename
   - Прописуємо в функцію переіменування файла в .min.css

   - Запустили gulp, все робе
   - Тепер прокачуємо роботу зі стилями, встановлюємо ще 4 плагіна, опис у scss.js: 
     npm i -D gulp-clean-css gulp-webpcss gulp-autoprefixer gulp-group-css-media-queries
   - та інтегруємо їх в нашу задачу          

   - Підключаємо їх після того як спрацював наш плагін sass         
   - Для роботи gulp-webpcss ще треба плагін npm i -D webp-converter@2.2.3 (встановили - типу треба саме цю вершн)

12. JS ---------------------------------------------------------------------------------------------------------------------------

   - Прописуємо шляхі
   - Створюємо задачу js.js
   - Імпортуємо в головний файл задачу, вписуємо її в спостерігача та в сценарії
   
   - встановлюєм npm i -D webpack webpack-stream для работи модулів ES6 та збирання жс файлів
   - додаємо модуль webpack в задачу js.js перед вигрузкою файлів

   - Створюємо папку js в папці src, та всередині папку modules
     для підключення модулів сінтаксісу ES6, та в середині файл functions.js
   - В цій функції прописуємо перевірку на підтримку webp картинок браузером

   - Потім імпортировали цю функцію в файл app.js та визвали там flsFunction.isWebp();

13. Підключення модулів на прикладі слайдера - плагіна swiper --------------------------------------------------------------------

   - npm i -D swiper - сучасні ES6 планіни
   - та імпортували в app.js

14. Обробка зображень -------------------------------------------------------------------------------------------------------------

   - Прописуємо шляхі, створюємо таску images.js - туда вписуємо майже шаблонну функцію, змінюючи назву на images
   - Додаємо 2 плагіни для оптимізаціх зображень: npm i -D gulp-imagemin gulp-webp
   - імпортуємо їх в таску, та задачу в галпфайл.жс

   - дадаємо плагіг newer в функцію, він оновлює файли які потрібно

15. Шрифти ---------------------------------------------------------------------------------------------------------------------------

   - Прописуємо шляхі - тільки один до папки з результатом
   - Створюємо задачу fonts.js
   - Встановлюємо 2 і імпортуємо 3 плагіна в задачу: npm i -D gulp-fonter-fix gulp-ttf2woff2
   - Пишимо 3 функції задачі
   - Імпортуємо наші 3 задачі в галп.жс
   - Прописуємо їх в сценарій
   - запускаєм та тестім gulp

   - імпортуємо шріфти в файл style.scss вручну, зверху пишемо @import "fonts";

16. svg спрайти - коли декілька в одній ---------------------------------------------------------------------------------------------

   - Прописуємо шляхі в вихідних файлах, експорт окремо не пишемо, спостерігач теж не пишемо
   - Створюємо таску svgSprite.js
   - інсталим та імпортуємо плагін npm i -D gulp-svg-sprite
   - імпортуємо задачу в галп файл
   - Визиваємо конверт іконок наче вручну за потребою - не пишемо в загальний сценарій - export { svgSpriteTask };

   - В файлі package.json знаходимо об'єкт scripts, там одна властивість test, його видаляємо і прописуємо туди
   "svgSprite": "gulp svgSpriteTask"
   - для запуску задачі npm run svgSprite
   - створилися файл icons.svg та файл стек.хтмл в папці результату

17. Запуск галп в режимі розробника/продакшн ------------------------------------------------------------------------------------------------------------

   - Дописуємо в package.json ще одну властивість scripts: "dev": "gulp"
   - Запуск: npm run dev - режим розробника

   - Додаємо плагін в загальні плагіни - файл plugins.js - npm i -D gulp-if
   - Та відповідно вписуємо його в об'єкт з плагинами

   - Додаємо в глобальну змінну app два рядки: isBuild & isDev
   Для визначення в якому режимі розроб або прод ми знаходимось

   - В усі таски додаємо умову if, щоб не всі функції виконувалися в режимі розробника

   - В галп файлі створюємо ще окремий сценарій тільки в режимі продакшн: const build без спостерігача та сервера

   - Дописуємо в package.json ще одну властивість scripts:  "build": "gulp build --build"
   - Запуск: npm run build

18. Створення архіву з результатом -----------------------------------------------------------------------------------------------------------------------

   - Стврорюємо таску zip.js
   - Встановлюємо: npm i -D gulp-zip
   - Записуємо в галпфайл
   - Строрюємо новий сценарій const deployZip
   - Дописуємо в package.json ще одну властивість scripts:  "zip": "gulp deployZip --build",
   - Запуск: npm run zip

19. Відправлення файлів на ftp сервер ---------------------------------------------------------------------------------------------------------------------

   - Створюємо таску ftp-task.js
   - Імпортуємо туди конфіг файл ftp.js, та два плагіна: npm i -D vinyl-ftp gulp-util

   - Прописуємо вміст конфіг файлу ftp.js
   - Імпортуємо задачу в галп файл
   - Строрюємо новий сценарій const deployFtp
   - Дописуємо в package.json ще одну властивість scripts:  "deploy": "gulp deployFtp --build",
   - Запуск: npm run deploy

20. Використовувати цю збірку знов -------------------------------------------------------------------------------------------------------------------------

   - В package.json змінюємо версії плагинів:   "webp-converter": "^2.2.3" - видаляємо сімвол ^
   - Крім webp-converter усі версії плагинів можна замінити словом latest - тоді підгрузить останні версії

   - Створюємо нову папку, та копіюємо туди 2 файли: package.json та gulpfile.js
     та дві папки: src та gulp

   - Відкриваємо термінал в папці нового проекту, та запускаємо команду npm i - встановляться усі плагіни...
   - Запускаємо нову зборку в потрібном режимі: npm run dev/build